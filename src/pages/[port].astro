---
import Layout from '../layouts/Layout.astro';
import Button from '@components/Button.astro';
import Hero from '@components/Hero.astro';
import ExtendedFab from '@components/ExtendedFab.astro';
import Chip from '@components/Chip.astro';
import PortDetails from '@components/PortDetails.astro';

import { Icon } from 'astro-icon/components';

import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

import type { InferGetStaticParamsType, InferGetStaticPropsType, GetStaticPaths } from 'astro';
import AssetsImage from '@components/AssetsImage.astro';
import Carousel from '@components/Carousel.astro';
import PortLayout from '~/layouts/PortLayout.astro';

export const getStaticPaths = (async () => {
  const ports = await getCollection('port');
  return ports.map((port) => {
    return {
      params: { port: port.slug },
      props: { port },
    };
  });
}) satisfies GetStaticPaths;

interface Props {
  port: CollectionEntry<'port'>;
}

const { port } = Astro.props as Props;
const { title, images, assets, platforms } = port.data;
const meta = {
  title: `Wildberries theme for ${title}`,
  description: `A dark purple colorscheme for ${title} and many other apps`,
  image: `/api/og/${port.slug}.png`,
};
const { Content } = await port.render();
---

<Layout meta={meta} port={title}>
  <Hero cta={{ text: 'Apply Theme', href: '#instructions', icon: 'material-symbols:brush' }} ,>
    <div slot="title">
      <h1>{title}</h1>
    </div>
    <span slot="subtitle">
      A dark purple theme for <Chip value={title} variant="secondary" /> and many other apps
      <div class="flex text-sm mt-3 gap-2 justify-center md:justify-start">
        {
          platforms.map((p) => <Chip value={p} variant="dark" />)
        }
      </div>
    </span>
    {
      images && (
        <div class="max-w-5xl md:aspect-video">
          {images.length > 1 ? (
            <Carousel>
              {images.map((image) => (
                <AssetsImage class="w-full h-full object-contain" imagePath={image} altText="" />
              ))}
            </Carousel>
          ) : (
            <AssetsImage class="w-full h-full object-contain" imagePath={images[0]} altText="" />
          )}
        </div>
      )
    }
  </Hero>
  <PortLayout>
    <Fragment slot="heading">
      <div class="flex items-center justify-start gap-4 text-2xl mb-4 text-acid-green">
        <Icon class="h-10 w-10 p-1" name="material-symbols:brush" />
        <p>Instalation</p>
      </div>
    </Fragment>
    <div id="instructions" class="mx-auto max-w-4xl p-4 text-[#D1D5DB] rounded-2xl bg-darker-purple">
      <div
        class="px-2 py-3 max-w-full
          prose prose-md dark:prose-invert dark:prose-headings:text-inherit prose-md
        prose-p:text-darker-purple dark:prose-p:text-inherit
          prose-headings:font-heading prose-headings:leading-tighter prose-headings:tracking-tighter prose-headings:font-bold
        prose-a:text-grape dark:prose-a:text-[#399ee6]
          prose-img:rounded-md prose-img:shadow-lg
        marker:text-light-purple
        prose-code:text-light-purple prose-code:px-2 prose-code:py-1 prose-code:rounded-md"
      >
        <Content />
      </div>
      {
        assets &&
          assets.map((asset: string) => {
            return (
              <div>
                <p class="m-auto w-fit rounded-t-lg bg-darker-purple p-4 text-light-purple">{asset}</p>
                <Button href={`/ports/${asset}`} icon="tabler:download">
                  Download
                </Button>
              </div>
            );
          })
      }
    </div>
    <Fragment slot="floating-bar">
      <PortDetails port={port}/>
    </Fragment>
  </PortLayout>
  
  <ExtendedFab href="/" icon="bx:brush" variant="secondary"> Check all ports </ExtendedFab>
</Layout>
